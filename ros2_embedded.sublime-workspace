{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"vect",
				"vector3"
			],
			[
				"uint",
				"uint16_t"
			],
			[
				"write",
				"write_register"
			],
			[
				"u",
				"uint8_t"
			],
			[
				"print",
				"printf	printf â€¦"
			],
			[
				"NU",
				"NUTTX_RTOS"
			],
			[
				"soc",
				"sockfd_mcast"
			],
			[
				"mul",
				"multicast_thread"
			],
			[
				"flag",
				"flag_localizadores"
			],
			[
				"num",
				"numBytes"
			],
			[
				"nl",
				"nlocators"
			],
			[
				"local",
				"localizadores"
			],
			[
				"thread",
				"thread_number"
			],
			[
				"thre",
				"threads_buf"
			],
			[
				"threads_",
				"threads_buf_count"
			],
			[
				"threads",
				"threads_buf"
			],
			[
				"nlo",
				"nlocs"
			],
			[
				"nco",
				"nlocators"
			],
			[
				"from",
				"fromlen"
			],
			[
				"threa",
				"thread_number"
			],
			[
				"ring",
				"ringBuffer"
			],
			[
				"rin",
				"ringBuffer"
			],
			[
				"thr",
				"thread_number"
			],
			[
				"nc",
				"nlocators"
			],
			[
				"n",
				"nlocators"
			],
			[
				"max",
				"maxlocator"
			],
			[
				"Cha",
				"Chatroom"
			],
			[
				"N",
				"NUTTX_RTOS"
			],
			[
				"TINQ",
				"TINQ_COBJS"
			],
			[
				"configure",
				"configureEthernet"
			],
			[
				"dds",
				"dds_message"
			],
			[
				"topic",
				"topic_reader_"
			],
			[
				"subsc",
				"subscriber_qos"
			],
			[
				"CMSI",
				"CMSIS_LIB"
			],
			[
				"data",
				"data_writter"
			],
			[
				"qo",
				"qos_policy"
			]
		]
	},
	"buffers":
	[
		{
			"file": "apps/examples/ddsimu/Makefile",
			"settings":
			{
				"buffer_size": 10440,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 10562,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dds/apps/imu_publisher/Makefile",
			"settings":
			{
				"buffer_size": 6206,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dds/apps/imu_publisher/imu_publisher.c",
			"settings":
			{
				"buffer_size": 13733,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dds/apps/imu_publisher/vector3_msg.c",
			"settings":
			{
				"buffer_size": 6540,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dds/apps/imu_publisher/vector3_msg.h",
			"settings":
			{
				"buffer_size": 1913,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\n * Copyright (c) 2014 - Qeo LLC\n *\n * The source code form of this Qeo Open Source Project component is subject\n * to the terms of the Clear BSD license.\n *\n * You can redistribute it and/or modify it under the terms of the Clear BSD\n * License (http://directory.fsf.org/wiki/License:ClearBSD). See LICENSE file\n * for more details.\n *\n * The Qeo Open Source Project also includes third party Open Source Software.\n * See LICENSE file for more details.\n */\n\n#include <nuttx/config.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <unistd.h>\n#include <poll.h>\n#include \"thread.h\"\n#include \"libx.h\"\n#include \"tty.h\"\n#ifdef DDS_SECURITY\n#include \"dds/dds_security.h\"\n#ifdef DDS_NATIVE_SECURITY\n#include \"nsecplug/nsecplug.h\"\n#else\n#include \"msecplug/msecplug.h\"\n#include \"assert.h\"\n#include \"../../plugins/secplug/xmlparse.h\"\n#endif\n#include \"../../plugins/security/engine_fs.h\"\n#endif\n#include \"dds/dds_aux.h\"\n#include \"dds/dds_debug.h\"\n#include <stdio.h>\n #include <stdint.h>\n \n#include \"lis302dlh.h\"\n//#include \"chat_msg.h\"\n#include \"vector3_msg.h\" \n\n#define	WAITSETS		/* Set this to use the WaitSet mechanism. */\n/*#define TRANSIENT_LOCAL	** Set to use Transient-local Durability. */\n/*#define RELIABLE		** Set this for Reliable transfers. */\n/*#define KEEP_ALL		** Set this for infinite history. */\n#define HISTORY		1	/* # of samples buffered. */\n#define	DISPLAY_SELF		/* Define this to display own messages. */\n\nconst char		*progname;\nchar			chatroom [64] = \"DDS\";		/* Chatroom name. */\nchar			user_name [64];			/* User name. */\nunsigned		domain_id;			/* Domain identifier. */\nint			verbose, aborting;\nthread_t		rt;\nthread_t		rt2;\n#ifdef DDS_SECURITY\nchar                    *engine_id;		/* Engine id. */\nchar                    *cert_path;		/* Certificates path. */\nchar                    *key_path;		/* Private key path. */\nchar                    *realm_name;		/* Realm name. */\n#endif\n\nDDS_DomainParticipant	part;\nDDS_DynamicTypeSupport	ts;\nDDS_Publisher		pub;\nDDS_Subscriber		sub;\nDDS_Topic		topic;\nDDS_TopicDescription	td;\nDDS_DynamicDataWriter	dw;\nDDS_DynamicDataReader	dr;\n\n/* usage -- Print out program usage. */\n\nvoid usage (void)\n{\n	fprintf (stderr, \"chat -- simple non-graphical chat demo program.\\r\\n\");\n	fprintf (stderr, \"Usage: chat [switches]\\r\\n\");\n	fprintf (stderr, \"\\r\\n\");\n	fprintf (stderr, \"Switches:\\r\\n\");\n	fprintf (stderr, \"   -r <chatroom>     Chatroom name (default=DDS).\\r\\n\");\n	fprintf (stderr, \"   -u <name>         User name (default=.pid.$PID).\\r\\n\");\n	fprintf (stderr, \"   -i <domain_id>    Domain identifier.\\r\\n\");\n#ifdef DDS_SECURITY\n	fprintf (stderr, \"   -e <name>         Pass the name of the engine.\\r\\n\");\n	fprintf (stderr, \"   -c <path>         Path of the certificate to use.\\r\\n\");\n	fprintf (stderr, \"   -k <path>         Path of the private key to use.\\r\\n\");\n	fprintf (stderr, \"   -z <realm>        The realm name.\\r\\n\");\n#endif\n	fprintf (stderr, \"   -v                Verbose.\\r\\n\");\n	fprintf (stderr, \"   -vv               Very verbose.\\r\\n\");\n	fprintf (stderr, \"   -h                Show some program help.\\r\\n\");\n	exit (1);\n}\n\n/* get_num -- Get a number from the command line arguments. */\n\nint get_num (const char **cpp, unsigned *num, unsigned min, unsigned max)\n{\n	const char	*cp = *cpp;\n\n	while (isspace (*cp))\n		cp++;\n	if (*cp < '0' || *cp > '9')\n		return (0);\n\n	*num = (unsigned) atoi (cp);\n	if (*num < min || *num > max)\n		return (0);\n\n	while (*cp)\n		cp++;\n\n	*cpp = cp;\n	return (1);\n}\n\n/* get_str -- Get a string from the command line arguments. */\n\nint get_str (const char **cpp, const char **name)\n{\n	const char	*cp = *cpp;\n\n	while (isspace (*cp))\n		cp++;\n\n	*name = cp;\n	while (*cp)\n		cp++;\n\n	*cpp = cp;\n	return (1);\n}\n\n#define	INC_ARG()	if (!*cp) { i++; cp = argv [i]; }\n\n/* do_switches -- Command line switch decoder. */\n\nint do_switches (int argc, const char **argv)\n{\n	int		i;\n	const char	*cp, *user, *room;\n#ifdef DDS_SECURITY\n	const char      *arg_input;\n#endif\n	progname = argv [0];\n	for (i = 1; i < argc; i++) {\n		cp = argv [i];\n		if (*cp++ != '-')\n			break;\n\n		while (*cp) {\n			switch (*cp++) {\n				case 'r':\n					INC_ARG ();\n					if (!get_str (&cp, &room)) {\n						printf (\"chatroom name expected!\\r\\n\");\n						usage ();\n					}\n					memcpy (chatroom, room, strlen (room) + 1);\n					break;\n\n				case 'u':\n					INC_ARG ();\n					if (!get_str (&cp, &user)) {\n						printf (\"user name expected!\\r\\n\");\n						usage ();\n					}\n					memcpy (user_name, user, strlen (user) + 1);\n					break;\n				case 'i':\n					INC_ARG ();\n					get_num (&cp, &domain_id, 0, 255);\n					break;\n# if 0\n				case 't':\n					trace = 1;\n					break;\n# endif\n#ifdef DDS_SECURITY\n			        case 'e':\n					INC_ARG ()\n					if (!get_str (&cp, &arg_input))\n						usage ();\n					engine_id = malloc (strlen (arg_input) + 1);\n					strcpy (engine_id, arg_input);\n					break;\n			        case 'c':\n					INC_ARG ()\n					if (!get_str (&cp, &arg_input))\n						usage ();\n					cert_path = malloc (strlen (arg_input) + 1);\n					strcpy (cert_path, arg_input);\n					break;\n			        case 'k':\n					INC_ARG ()\n					if (!get_str (&cp, &arg_input))\n						usage ();\n					key_path = malloc (strlen (arg_input) + 1);\n					strcpy (key_path, arg_input);\n\n					break;\n			        case 'z':\n					INC_ARG ()\n					if (!get_str (&cp, &arg_input))\n						usage ();\n					realm_name = malloc (strlen (arg_input) + 1);\n					strcpy (realm_name, arg_input);\n					break;\n#endif\n				case 'v':\n					verbose = 1;\n					if (*cp == 'v') {\n						verbose = 2;\n						cp++;\n					}\n					break;\n				default:\n					usage ();\n				break;\n			}\n		}\n	}\n	return (i);\n}\n\nvoid do_dds (DDS_DataWriter dw)\n{\n	Vector3_t		m;\n	DDS_InstanceHandle_t	h;\n	char			buf [256];\n\n\n#if !defined (NUTTX_RTOS)\n	tty_init ();\n	DDS_Handle_attach (tty_stdin,\n			   POLLIN | POLLPRI | POLLERR | POLLHUP | POLLNVAL,\n			   tty_input,\n			   NULL);\n#endif\n#if 0\n	printf (\"ROS 2 Embedded DDSIMU test program.\\r\\n\");\n	printf (\"Anything you type will be sent to all chatroom attendees.\\r\\n\");\n	printf (\"      (Please write messages of less than 255 characters).\\r\\n\");	\n	printf (\"Type '!help' for chatroom options.\\r\\n\");\n	m.chatroom = chatroom;\n	m.from = user_name;\n#endif\n	h = 0;\n	while (!aborting) {\n#if defined (NUTTX_RTOS)\n		/* Take into account that fgets reads the \"\\n\" character at the end\n		of each line. Code should consider this aspect in every case */\n		fgets(buf, 256, stdin);\n#else\n		tty_gets (sizeof (buf), buf, 0, 1);\n#endif\n		if (buf [0] == '!') {\n#if defined (NUTTX_RTOS)						\n			if (!strcmp (buf + 1, \"quit\\n\") ||\n			    (buf [1] == 'q' && buf [2] == '\\n')) {\n#else\n			if (!strcmp (buf + 1, \"quit\") ||\n			    (buf [1] == 'q' && buf [2] == '\\0')) {				\n#endif\n				aborting = 1;\n				break;\n			}\n#if defined (NUTTX_RTOS)						\n			else if (!strcmp (buf + 1, \"list\\n\"))\n#else\n			else if (!strcmp (buf + 1, \"list\"))\n#endif			\n				printf (\"Attendees:\\r\\n\\t%s\\r\\n\", user_name);\n#if defined (NUTTX_RTOS)						\n			else if (!memcmp (buf + 1, \"user\\n\", 4)) {\n#else\n			else if (!memcmp (buf + 1, \"user\", 4)) {\n#endif			\n				if (h) {\n					Vector3_signal (dw, h, 1);\n					h = 0;\n				}\n				strcpy (user_name, buf + 6);\n				printf (\"You are now: %s\\r\\n\", user_name);\n			}\n#if defined (NUTTX_RTOS)						\n			else if (!memcmp (buf + 1, \"room\\n\", 4)) {\n#else\n			else if (!memcmp (buf + 1, \"room\", 4)) {\n#endif						\n				if (h) {\n					Vector3_signal (dw, h, 1);\n					h = 0;\n				}\n				strcpy (chatroom, buf + 6);\n				printf (\"Switched to chatroom: %s\\r\\n\", chatroom);\n			}\n#if defined (NUTTX_RTOS)						\n			else if (!strcmp (buf + 1, \"info\\n\"))\n#else\n			else if (!strcmp (buf + 1, \"info\"))\n#endif			\n				printf (\"Chatroom: %s, Username: %s\\r\\n\", \n							chatroom, user_name);\n#if defined (NUTTX_RTOS)						\n			else if (!strcmp (buf + 1, \"busy\\n\"))\n#else\n			else if (!strcmp (buf + 1, \"busy\"))\n#endif			\n				Vector3_signal (dw, h, 0);\n#if defined (NUTTX_RTOS)						\n			else if (!strcmp (buf + 1, \"away\\n\")) {\n#else\n			else if (!strcmp (buf + 1, \"away\")) {\n#endif			\n				if (h) {\n					Vector3_signal (dw, h, 1);\n					h = 0;\n				}\n			}\n#if defined (NUTTX_RTOS)			\n			else if (!strcmp (buf + 1, \"help\\n\") ||\n				 (buf [1] == 'h' && buf [2] == '\\n\\0') ||\n				 (buf [1] == '?' && buf [2] == '\\n\\0')) {\n\n#else\n			else if (!strcmp (buf + 1, \"help\") ||\n				 (buf [1] == 'h' && buf [2] == '\\0') ||\n				 (buf [1] == '?' && buf [2] == '\\0')) {\n#endif\n				printf (\"Commands:\\r\\n\");\n				printf (\"    !room <room_name>   -> set the chatroom name.\\r\\n\");\n				printf (\"    !user <user_name>   -> set the user name.\\r\\n\");\n				printf (\"    !list               -> list the attendees.\\r\\n\");\n				printf (\"    !info               -> show chatroom and user.\\r\\n\");\n				printf (\"    !busy               -> momentarily not involved.\\r\\n\");\n				printf (\"    !away               -> gone away.\\r\\n\");\n				printf (\"    !help or !h or !?   -> Show this info.\\r\\n\");\n				printf (\"    !quit or !q         -> Quit the chatroom.\\r\\n\");\n				printf (\"    !!<command>         -> DDS debug command.\\r\\n\");\n				/* printf (\"    !$<command>         -> Shell command.\\r\\n\"); */\n			}			\n			else if (buf [1] == '!')\n				DDS_Debug_command (buf + 2);\n			/* else if (buf [1] == '$')\n				system (buf + 2); */\n			else\n				printf (\"?%s\\r\\n\", buf + 1);\n			continue;\n		} else {\n			printf(\"Writing to the other endpoints not allowed.\\n\");\n#if 0\n			if (!h)\n				h = Vector3_register (dw, &m);\n			//sprintf(buf_t, \"Embedded says %s\\n\", buf);\n			fetch_imu();\n			//m.message = buf_t;\n			m.message = buf;\n			Vector3_write (dw, &m, h);\n#endif\n		}\n	}\n}\n\n//char			buf_t [256];\nuint16_t accx;\nuint16_t accy = read_accel_y();\nuint16_t accz = read_accel_z();\n\nvoid fetch_imu(void)\n{\n	uint16_t accx = read_accel_x();\n	uint16_t accy = read_accel_y();\n	uint16_t accz = read_accel_z();\n\n	sprintf(buf_t, \"acc_x: %d, acc_y: %d, acc_z: %d\", accx, accy, accz);\n	// sprintf(buf_t, \"Embedded says hi\\n\");\n}\n\nstatic void *dds_send_imu (void *args)\n{\n	Vector3_t				m;\n	DDS_InstanceHandle_t	h;\n\n	// Init I2C and print registers\n  	setup_i2c();\n  	print_config_i2c();		\n\n	m.chatroom = chatroom;\n	m.from = user_name;\n	h = 0;\n	for (;;){\n		sleep (1); // sleep 0.5 seconds\n		//sprintf(buf_t, \"Embedded says %s\\n\", buf);\n		//sprintf(buf_t, \"Embedded says %s\\n\", buf);\n		m.x_ = 1 + i;\n		m.y_ = 2 + i;\n		m.z_ = 3 + i;\n		i++;\n#if 0\n		/* According to https://github.com/brunodebus/tinq-core/issues/7#issuecomment-63740498:\n			the Vector3 shouldn't be registered if it doesn't contain a @key attribute\n		*/		\n		if (!h)\n			h = Vector3_register (dw, &m);\n#endif\n		Vector3_write (dw, &m, h);\n	}\n}\n\nvoid read_msg (DDS_DataReaderListener *l, DDS_DataReader dr)\n{\n	Vector3_t		msg;\n	DDS_InstanceStateKind	kind;\n	int			valid;\n	DDS_ReturnCode_t	ret;\n\n	ARG_NOT_USED (l)\n\n	memset (&msg, 0, sizeof (msg));\n	ret = Vector3_read_or_take (dr, &msg, DDS_NOT_READ_SAMPLE_STATE, \n					      DDS_ANY_VIEW_STATE,\n					      DDS_ANY_INSTANCE_STATE, 1,\n					      &valid, &kind);\n	if (ret == DDS_RETCODE_OK)\n		do {\n#ifndef DISPLAY_SELF\n			if (!strcmp (msg.from, user_name) &&\n			    !strcmp (msg.chatroom, chatroom))\n				break;\n#endif\n			if (valid)\n				printf (\"%s: %s\\r\\n\", msg.from, msg.message);\n			else if (kind == DDS_NOT_ALIVE_DISPOSED_INSTANCE_STATE)\n				printf (\"%s is busy!\\r\\n\", msg.from);\n			else if (kind == DDS_NOT_ALIVE_NO_WRITERS_INSTANCE_STATE)\n				printf (\"%s has left!\\r\\n\", msg.from);\n		}\n		while (0);\n\n	Vector3_cleanup (&msg);\n}\n\n#ifdef WAITSETS\n\nstatic void *chat_reader (void *args)\n{\n	DDS_DynamicDataReader	dr;\n	DDS_WaitSet		ws;\n	DDS_SampleStateMask	ss = DDS_NOT_READ_SAMPLE_STATE;\n	DDS_ViewStateMask	vs = DDS_ANY_VIEW_STATE;\n	DDS_InstanceStateMask	is = DDS_ANY_INSTANCE_STATE;\n	DDS_ReadCondition	rc;\n	DDS_ConditionSeq	conds = DDS_SEQ_INITIALIZER (DDS_Condition);\n	DDS_Duration_t		to;\n	DDS_ReturnCode_t	ret;\n\n	dr = args;\n\n	ws = DDS_WaitSet__alloc ();\n	if (!ws)\n		fatal (\"Unable to allocate a WaitSet!\");\n\n	if (verbose)\n		printf (\"DDS Waitset allocated.\\r\\n\");\n\n	rc = DDS_DataReader_create_readcondition (dr, ss, vs, is);\n	if (!rc)\n		fatal (\"DDS_DataReader_create_readcondition () returned an error!\");\n\n	if (verbose)\n		printf (\"DDS Readcondition created.\\r\\n\");\n\n	ret = DDS_WaitSet_attach_condition (ws, rc);\n	if (ret)\n		fatal (\"Unable to attach condition to a WaitSet!\");\n\n	while (!aborting) {\n		to.sec = 0;\n		to.nanosec = 200000000;	/* Timeout after 200ms. */\n		ret = DDS_WaitSet_wait (ws, &conds, &to);\n		if (ret == DDS_RETCODE_TIMEOUT)\n			continue;\n\n		read_msg (NULL, dr);\n	}\n	ret = DDS_WaitSet_detach_condition (ws, rc);\n	if (ret)\n		fatal (\"Unable to detach condition from WaitSet (%s)!\", DDS_error (ret));\n\n	DDS_WaitSet__free (ws);\n\n	return (NULL);\n}\n\nstatic void start_chat_reader (DDS_DynamicDataReader dr)\n{\n	thread_create (rt, chat_reader, dr);\n}\n\nstatic void stop_chat_reader (DDS_DynamicDataReader dr)\n{\n	ARG_NOT_USED (dr)\n\n	thread_wait (rt, NULL);\n}\n\n#else\n\nstatic DDS_DataReaderListener msg_listener = {\n	NULL,		/* Sample rejected. */\n	NULL,		/* Liveliness changed. */\n	NULL,		/* Requested Deadline missed. */\n	NULL,		/* Requested incompatible QoS. */\n	read_msg,	/* Data available. */\n	NULL,		/* Subscription matched. */\n	NULL,		/* Sample lost. */\n	NULL		/* Cookie */\n};\n\n#endif\n#ifdef DDS_SECURITY\n\n#define fail_unless     assert\n\nstatic void enable_security (void)\n{\n	DDS_Credentials		credentials;\n	DDS_ReturnCode_t	error;\n#ifdef MSECPLUG_WITH_SECXML\n	/*int dhandle, thandle;*/\n#endif\n	error = DDS_SP_set_policy ();\n	if (error)\n		fatal (\"DDS_SP_set_policy() returned error (%s)!\", DDS_error (error));\n\n#ifdef MSECPLUG_WITH_SECXML\n	if (DDS_SP_parse_xml (\"security.xml\"))\n		fatal (\"SP: no DDS security rules in 'security.xml'!\\r\\n\");\n#else\n	DDS_SP_add_domain();\n	if (!realm_name)\n		DDS_SP_add_participant ();\n	else \n		DDS_SP_set_participant_access (DDS_SP_add_participant (), strcat(realm_name, \"*\"), 2, 0);\n#endif\n	if (!cert_path || !key_path)\n		fatal (\"Error: you must provide a valid certificate path and a valid private key path\\r\\n\");\n\n	if (engine_id) {\n		DDS_SP_init_engine (engine_id, init_engine_fs);\n		credentials.credentialKind = DDS_ENGINE_BASED;\n		credentials.info.engine.engine_id = engine_id;\n		credentials.info.engine.cert_id = cert_path;\n		credentials.info.engine.priv_key_id = key_path;\n	}\n	else {\n		credentials.credentialKind = DDS_FILE_BASED;\n		credentials.info.filenames.private_key_file = key_path;\n		credentials.info.filenames.certificate_chain_file = cert_path;\n	}\n\n	error = DDS_Security_set_credentials (\"Technicolor Chatroom\", &credentials);\n}\n\nstatic void cleanup_security (void)\n{\n	/* Cleanup security submodule. */\n	DDS_SP_access_db_cleanup ();\n	DDS_SP_engine_cleanup ();\n\n	/* Cleanup malloc-ed memory. */\n	if (engine_id)\n		free (engine_id);\n	if (cert_path)\n		free (cert_path);\n	if (key_path)\n		free (key_path);\n	if (realm_name)\n		free (realm_name);\n}\n\n#endif\n\n\n#if defined (NUTTX_RTOS)\n#include <arpa/inet.h>\n#include <netinet/in.h>\n#include <apps/netutils/netlib.h>\n#endif\n\n#ifdef CONFIG_BUILD_KERNEL\nint main(int argc, FAR char *argv[])\n#else\nint dds_chat_main(int argc, char *argv[])\n#endif\n{\n	DDS_DataWriterQos 	wr_qos;\n	DDS_DataReaderQos	rd_qos;\n	DDS_ReturnCode_t	error;	\n	struct in_addr addr;\n\n	/* Configure the network */\n	/* Set up our host address */\n	addr.s_addr = HTONL(CONFIG_EXAMPLES_UDP_IPADDR);\n	netlib_sethostaddr(\"eth0\", &addr);\n\n	/* Set up the default router address */\n	addr.s_addr = HTONL(CONFIG_EXAMPLES_UDP_DRIPADDR);\n	netlib_setdraddr(\"eth0\", &addr);\n\n	/* Setup the subnet mask */\n	addr.s_addr = HTONL(CONFIG_EXAMPLES_UDP_NETMASK);\n	netlib_setnetmask(\"eth0\", &addr);\n\n  	/* Start the application */\n  	printf(\"Network configured, starting DDS chat:\\n\");\n\n	sprintf (user_name, \".pid.%u\", getpid ());\n	do_switches (argc, argv);\n	if (verbose > 1)\n		DDS_Log_stdio (1);\n\n	//DDS_entity_name (\"ROS 2.0 embedded\");\n	DDS_entity_name (\"Technicolor Chatroom\");\n\n#ifdef DDS_SECURITY\n	if (cert_path || key_path || engine_id)\n		enable_security ();\n#endif\n	part = DDS_DomainParticipantFactory_create_participant (domain_id, NULL, NULL, 0);\n	if (!part) {\n		printf (\"Can't create participant!\\r\\n\");\n		exit (1);\n	}\n	if (verbose)\n		printf (\"DDS Domain Participant created.\\r\\n\");\n\n	ts = Vector3_type_new ();\n	if (!ts) {\n		printf (\"Can't create chat message type!\\r\\n\");\n		exit (1);\n	}\n	error = DDS_DynamicTypeSupport_register_type (ts, part, \"simple_msgs::dds_::Vector3_\");\n	if (error) {\n		printf (\"Can't register chat message type.\\r\\n\");\n		exit (1);\n	}\n	if (verbose)\n		printf (\"DDS Topic type ('%s') registered.\\r\\n\", \"simple_msgs::dds_::Vector3_\");\n\n	topic = DDS_DomainParticipant_create_topic (part, \"imu\", \"simple_msgs::dds_::Vector3_\", NULL, NULL, 0);\n	if (!topic) {\n		printf (\"Can't register chat message type.\\r\\n\");\n		exit (1);\n	}\n	if (verbose)\n		printf (\"DDS imu Topic created.\\r\\n\");\n\n	td = DDS_DomainParticipant_lookup_topicdescription (part, \"imu\");\n	if (!td) {\n		printf (\"Can't get topicdescription.\\r\\n\");\n		exit (1);\n	}\n	pub = DDS_DomainParticipant_create_publisher (part, NULL, NULL, 0);\n	if (!pub) {\n		printf (\"DDS_DomainParticipant_create_publisher () failed!\\r\\n\");\n		exit (1);\n	}\n	DDS_Publisher_get_default_datawriter_qos (pub, &wr_qos);\n#ifdef TRANSIENT_LOCAL\n	wr_qos.durability.kind = DDS_TRANSIENT_LOCAL_DURABILITY_QOS;\n#endif\n#ifdef RELIABLE\n	wr_qos.reliability.kind = DDS_RELIABLE_RELIABILITY_QOS;\n#endif\n#ifdef KEEP_ALL\n	wr_qos.history.kind = DDS_KEEP_ALL_HISTORY_QOS;\n	wr_qos.history.depth = DDS_LENGTH_UNLIMITED;\n	wr_qos.resource_limits.max_samples_per_instance = HISTORY;\n	wr_qos.resource_limits.max_instances = HISTORY * 10;\n	wr_qos.resource_limits.max_samples = HISTORY * 4;\n#else\n	wr_qos.history.kind = DDS_KEEP_LAST_HISTORY_QOS;\n	wr_qos.history.depth = HISTORY;\n#endif\n	/* Create a Data Writer. */\n	dw = DDS_Publisher_create_datawriter (pub, topic, &wr_qos, NULL, 0);\n	if (!dw) {\n		printf (\"Unable to create chat message writer.\\r\\n\");\n		exit (1);\n	}\n	if (verbose)\n		printf (\"DDS Chat message writer created.\\r\\n\");\n\n	sub = DDS_DomainParticipant_create_subscriber (part, NULL, NULL, 0); \n	if (!sub) {\n		printf (\"DDS_DomainParticipant_create_subscriber () returned an error!\\r\\n\");\n		exit (1);\n	}\n	if (verbose)\n		printf (\"DDS Subscriber created.\\r\\n\");\n\n	DDS_Subscriber_get_default_datareader_qos (sub, &rd_qos);\n#ifdef TRANSIENT_LOCAL\n	rd_qos.durability.kind = DDS_TRANSIENT_LOCAL_DURABILITY_QOS;\n#endif\n#ifdef RELIABLE\n	rd_qos.reliability.kind = DDS_RELIABLE_RELIABILITY_QOS;\n#endif\n#ifdef KEEP_ALL\n	rd_qos.history.kind = DDS_KEEP_ALL_HISTORY_QOS;\n	rd_qos.history.depth = DDS_LENGTH_UNLIMITED;\n	rd_qos.resource_limits.max_samples_per_instance = HISTORY;\n	rd_qos.resource_limits.max_instances = HISTORY * 10;\n	rd_qos.resource_limits.max_samples = HISTORY * 4;\n#else\n	rd_qos.history.kind = DDS_KEEP_LAST_HISTORY_QOS;\n	rd_qos.history.depth = HISTORY;\n#endif\n	dr = DDS_Subscriber_create_datareader (sub, td, &rd_qos,\n#ifndef WAITSETS\n			 &msg_listener, DDS_DATA_AVAILABLE_STATUS);\n#else\n			 NULL, 0);\n#endif\n	if (!dr) {\n		printf (\"DDS_DomainParticipant_create_datareader () returned an error!\\r\\n\");\n		exit (1);\n	}\n	if (verbose)\n		printf (\"DDS Chat message reader created.\\r\\n\");\n\n#ifdef WAITSETS\n	//start_chat_reader (dr);\n#endif\n\n	thread_create (rt2, dds_send_imu, dr);\n\n	do_dds (dw);\n\n#ifdef WAITSETS\n	//stop_chat_reader (dr);\n#endif\n	DDS_Publisher_delete_datawriter (pub, dw);\n	usleep (200000);\n	error = DDS_DomainParticipant_delete_contained_entities (part);\n	if (verbose)\n		printf (\"DDS Entities deleted (error = %u).\\r\\n\", error);\n\n	Vector3_type_free (ts);\n	if (verbose)\n		printf (\"Chat Type deleted.\\r\\n\");\n\n	error = DDS_DomainParticipantFactory_delete_participant (part);\n	if (verbose)\n		printf (\"DDS Participant deleted (error = %u).\\r\\n\", error);\n\n#ifdef DDS_SECURITY\n	if (cert_path || key_path || engine_id)\n		cleanup_security ();\n#endif\n	return (0);\n}",
			"file": "apps/examples/imu_publisher/main.c",
			"file_size": 19559,
			"file_write_time": 130610037944220586,
			"settings":
			{
				"buffer_size": 19640,
				"line_ending": "Unix"
			}
		},
		{
			"file": "apps/examples/imu_publisher/Makefile",
			"settings":
			{
				"buffer_size": 10458,
				"line_ending": "Unix"
			}
		},
		{
			"file": "apps/examples/imu_subscriber/Makefile",
			"settings":
			{
				"buffer_size": 10501,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dds/src/trans/ip/ri_udp.c",
			"settings":
			{
				"buffer_size": 51710,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "ros_nuttx",
	"command_palette":
	{
		"height": 96.0,
		"selected_items":
		[
			[
				"syntax Make",
				"Set Syntax: Makefile"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"syntax:C",
				"Set Syntax: C"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"git commi",
				"Git: Commit"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git add ",
				"Git: Add Current File"
			],
			[
				"git diff",
				"Git: Diff Current File"
			],
			[
				"git log",
				"Git: Log All"
			],
			[
				"git statu",
				"Git: Status"
			],
			[
				"git di",
				"Git: Diff All Files"
			],
			[
				"reinde",
				"Indentation: Reindent Lines"
			],
			[
				"reindent",
				"Indentation: Reindent Lines"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"git ad",
				"Git: Add Current File"
			],
			[
				"git dif",
				"Git: Diff All Files"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"syntax mak",
				"Set Syntax: Makefile"
			],
			[
				"syntax makefi",
				"Set Syntax: Makefile"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"syntax",
				"Set Syntax: CMake"
			],
			[
				"build",
				"Build: apps: echo"
			],
			[
				"syro",
				"Set Syntax: ros2 embedded build"
			],
			[
				"syros",
				"Set Syntax: ros2 embedded build"
			],
			[
				"syam",
				"Set Syntax: ament build"
			],
			[
				"syn ros",
				"Set Syntax: ros2 embedded build"
			],
			[
				"bui",
				"Build: apps: echo"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"ref",
				"Side Bar: Refresh"
			],
			[
				"refre",
				"Project: Refresh Folders"
			],
			[
				"buil",
				"Build: ament build: Connext"
			],
			[
				"buld ",
				"Build: ament build: Connext"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"git ",
				"Git: Toggle Annotations"
			],
			[
				"git an",
				"Git: Toggle Annotations"
			],
			[
				"syc++",
				"Set Syntax: C++"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"git to",
				"Git: Toggle Annotations"
			],
			[
				"save",
				"Project: Save As"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"isntal",
				"Package Control: Install Package"
			],
			[
				"package inst",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 174.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/victor/Dropbox/OSRF/tinq-core/dds/apps/imu_subscriber/Makefile.old",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/ddsimu/main.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/imu_subscriber/imu_subscriber.",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/imu_subscriber/imu_subscriber.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/imu_subscriber/Makefile",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/imu_subscriber/imu_subscriber.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/dbg/debug.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/trans/ip/rtps_ip.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/udpsimple_mcast/udpsimple_mcast.c",
		"/home/victor/Dropbox/OSRF/tinq-core/dds/apps/imu_subscriber/Makefile",
		"/home/victor/ros2_ws/install/share/simple_msgs/dds_opensplice/Vector3_.idl",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/include/type_data.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/imu/imu.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/dcps/dcps_writer.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/chat/main.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/rcl/aux/chat_msg.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/rcl/aux/chat_msg.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/COPYING",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/api/headers/dds/dds_dcps.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/sched/clock/clock_abstime2ticks.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/chat/chat_msg.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/chat/chat_msg.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/api/headers/dds/dds_xtypes.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/hunter/mainHunter.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/imu_publisher/imu_inspired.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/imu/Makefile",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/imu/imu_inspired.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/imu/lis302dlh.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/hello/Makefile",
		"/home/victor/apm/ardupilot/libraries/GCS_MAVLink/include/mavlink/v0.9/mavlink_types.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/imu/lsm303d.c.STM32F3Discovery",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/doc/dita/chat.dita",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/ChangeLog",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/arch/arm/src/calypso/calypso_head.S",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/include/typecode.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/configs/stm3240g-eval/src/up_selectsram.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/configs/stm3240g-eval/src/up_extmem.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/imu/imu_chatinspired.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/system/free/free.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/mm/umm_heap/umm_initialize.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/mm/mm_heap/mm_initialize.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/include/db.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/idl/Makefile",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/imu/README.md",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/idl/out.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/idl/main.c",
		"/home/victor/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/idl/defsampledump.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/idl/cdump.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/co/config.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/xtypes/pid.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/dds_publisher/chat_msg.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/dds/dds.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/dds/uqos.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/dds/main.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/co/sock.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/include/disc.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/ros/publisher/Makefile",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/rtps/rtps_main.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/dds/Makefile",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/disc/disc_ep.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/include/ri_tcp_sock.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/doc/dita/commands.dita",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/ddsimu/lis302dlh.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/ddsimu/lis302dlh.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/Documentation/freeports.html",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/netutils/ftpc/ftpc_rename.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/include/ftpc.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/misc/buildroot/toolchain/binutils/2.17/300-012_check_ldrunpath_length.patch",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/README.txt",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/README.md",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/imu/hello_main.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/rcl/rcl.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/rcl/rcl.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/include/nuttx/i2c.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/imu/lis302dlh.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/imu/lis302dlh.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/imu/Makefile",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/system/i2c/i2c_common.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/tools/openocd-source/tcl/target/ixp42x.cfg",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/configs/viewtool-stm32f107/src/stm32_cxxinitialize.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/i2schar/i2schar.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/stlink/INSTALL",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/arch/z80/src/ez80/ez80_i2c.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/arch/arm/src/Makefile",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/include/arch/arch.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/arch/z80/src/z8/z8_i2c.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/arch/z80/include/z180/io.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/imu/lsm303d.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/imu/lsm303d.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/ddsimu/lsm303d.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/ddsimu/lsm303d.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/ros/publisher/main.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/include/ri_data.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/system/readline/readline_common.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/.config",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/co/thread.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/dds/domain.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/include/netinet/in.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/include/thread.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/udp/udp-client.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/rtps/rtps_msg.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/tools/serial_terminal/bin/reflex_terminal",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/udp_multithread_mcast/udp_multithread_mcast.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/udp_multithread_mcast/README.md",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/tools/openocd-source/tools/git2cl/git2cl",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/tools/gdb_init_commands",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/tools/gccarm.installed",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/udp_multithread/udp_multithread.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/doc/dita/cmake_opts.dita",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/dds/chat_msg.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/co/skiplist.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/include/domain.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/disc/disc_main.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/include/debug.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/dcps/main.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/idl/idlparser_support.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/idl/idlparser_support.c",
		"/home/victor/Dropbox/OSRF/tinq-core/dds/apps/idl/out.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/idl/idlparser.y",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/include/rtps_data.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/tools/discover.py",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/src/disc/disc_sedp.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/net/devif/devif_initialize.c",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/apps/examples/dds_publisher/chat_msg.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/doc/dds_full.h",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/dds/apps/idl/examples/DDS/xtypes.idl",
		"/home/victor/Dropbox/OSRF/ros2_embedded_nuttx/rcl/README.md"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
			"<open folders>",
			"<open files>",
			"<open files>,librt*",
			"embedded-dds",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Chat",
			"ChatMsg",
			"chat_msg",
			"ddsimu",
			"DDS_Debug_command",
			"ChatMsg_signal",
			"ChatMsg",
			"Chat",
			"DDS_FLOAT_64_TYPE",
			"Vector3",
			"imu_topic",
			"3",
			"h",
			");\n",
			"USE_MUTABLE",
			"DDS_DataWriter_register_instance: invalid parameters",
			"invalid",
			"chat",
			"vector3_msg",
			"chat",
			"chat_reader",
			"chat",
			"Chat",
			"chat",
			"Chat",
			"chat",
			"Chat",
			"DDS_DomainParticipant_create_topic",
			"ChatMsg",
			"ChatMsg_signal",
			"ChatMsg",
			"ChatMsg_t",
			"chatroom",
			"ChatMsg",
			"get_string",
			"ChatMsg",
			"DDS_DynamicData_set_int32_value",
			"ChatMsg",
			"Double",
			"DDS_INT_32_TYPE",
			"ChatMsg",
			"ChatMsg_signal",
			"ChatMsg",
			"get_string",
			"ChatMsg",
			"DDS_DynamicData_set_string_value",
			"ChatMsg",
			"Vector3_type",
			"ChatMsg",
			"DDS_DynamicTypeBuilderFactory_get_primitive_type",
			"double",
			"DDS_DynamicTypeBuilderFactory_create_string_type",
			"Vector3__tsm",
			"DDS_DynamicType_register",
			"ChatMsg",
			"ChatMsg_t",
			"chat",
			"do_chat",
			"chat",
			"	",
			"usage",
			"Usage",
			"usage",
			"GUIDED",
			"DBW",
			"CDR_TypeSupport",
			"XTYPES_USED",
			"CDR_TypeSupport",
			"cdr_typesupport",
			"CDR_TypeSupport",
			"dds_dcps",
			"CDR_TypeSupport",
			"tmr_dump",
			"rtps_ip_dump",
			"proxy_dump",
			"sproxy",
			"up_progmem_ispageerased",
			"reader (Chat) delete",
			"stop_chat_reader",
			"LIS302_CTRL_REG5",
			"lis320dlh_read_all",
			"lis320dlh_basic_setup",
			"inp",
			"I2C_WRITE",
			"temp",
			"LIS302_CTRL_REG1",
			"LIS302_CTRL_REG2",
			"LIS302_CTRL_REG1",
			"who",
			"WHO",
			"nuttx-i2c:",
			"writeread",
			"WRITEREAD",
			"writeread",
			"I2C_WRITE",
			"NULL",
			"lis320dlh_basic_setup",
			"uint8_t",
			"CFLAGS",
			"INC_PATH",
			"/**\n * @}\n */\n",
			"/**\n  * @}\n  */ \n",
			"/**\n  * @}\n  */  \n",
			"/**\n  * @}\n  */\n",
			"/**\n  * @}\n  */\n  \n",
			"chat_reader",
			"Embedded",
			"chatroom",
			"do_switches",
			"m",
			"do_chat",
			"Usage",
			"usage",
			"DDDS_TYPECODE",
			"UDP_OS_MCAST",
			"bool",
			"thread_recvfrom",
			"recv",
			"recvfrom",
			"disc_get_data",
			"DUDP_OS_MCAST",
			"$",
			"UDP_JOIN_DATA",
			"log_printf",
			"fd",
			"->fd",
			"ip_cx_st",
			"IP_CX"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			" "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "apps/examples/ddsimu/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10440,
						"regions":
						{
						},
						"selection":
						[
							[
								6018,
								6018
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2178.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10562,
						"regions":
						{
						},
						"selection":
						[
							[
								2980,
								2980
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/MarkdownEditing/Markdown.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1482.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "dds/apps/imu_publisher/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6206,
						"regions":
						{
						},
						"selection":
						[
							[
								295,
								295
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "dds/apps/imu_publisher/imu_publisher.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13733,
						"regions":
						{
						},
						"selection":
						[
							[
								5135,
								5135
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2970.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "dds/apps/imu_publisher/vector3_msg.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6540,
						"regions":
						{
						},
						"selection":
						[
							[
								1233,
								1233
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 792.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "dds/apps/imu_publisher/vector3_msg.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1913,
						"regions":
						{
						},
						"selection":
						[
							[
								368,
								368
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 6,
					"file": "apps/examples/imu_publisher/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19640,
						"regions":
						{
						},
						"selection":
						[
							[
								9531,
								9531
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7854.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "apps/examples/imu_publisher/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10458,
						"regions":
						{
						},
						"selection":
						[
							[
								6167,
								6167
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": -0.0,
						"translation.y": 2288.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "apps/examples/imu_subscriber/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10501,
						"regions":
						{
						},
						"selection":
						[
							[
								6884,
								6884
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2266.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "dds/src/trans/ip/ri_udp.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 51710,
						"regions":
						{
						},
						"selection":
						[
							[
								14202,
								14202
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 11249.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 46.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.492612160032,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 587.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 142.0
	},
	"project": "ros2_embedded.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"chat_ms",
				"rcl/aux/chat_msg.h"
			],
			[
				"chat_msg",
				"rcl/aux/chat_msg.c"
			],
			[
				"chat",
				"rcl/aux/chat_msg.h"
			],
			[
				"free.c",
				"apps/system/free/free.c"
			],
			[
				"rcl.c",
				"rcl/rcl.c"
			],
			[
				"rcl.h",
				"rcl/rcl.h"
			],
			[
				"i2c.h",
				"nuttx/include/nuttx/i2c.h"
			],
			[
				"arch/z80/src/z8/z8_i2c.c",
				"nuttx/arch/z80/src/ez80/ez80_i2c.c"
			],
			[
				"arch/z80/src/ez80/ez80_i2c.c",
				"nuttx/arch/z80/src/ez80/ez80_i2c.c"
			],
			[
				"readme",
				"README.md"
			],
			[
				"ri_data.h",
				"dds/src/include/ri_data.h"
			],
			[
				"ri_udp.c",
				"dds/src/trans/ip/ri_udp.c"
			],
			[
				"rtps_main",
				"dds/src/rtps/rtps_main.c"
			],
			[
				"config.c",
				"dds/src/co/config.c"
			],
			[
				"disc.h",
				"dds/src/include/disc.h"
			],
			[
				"main.c",
				"apps/examples/dds/main.c"
			],
			[
				"readme.",
				"README.md"
			],
			[
				"rtps_msg.h",
				"dds/src/rtps/rtps_msg.h"
			],
			[
				"rtps_msg.c",
				"dds/src/rtps/rtps_msg.c"
			],
			[
				"arch/armv7-m/irq.h",
				"nuttx/arch/arm/include/armv7-m/irq.h"
			],
			[
				"lio_listo",
				"nuttx/libc/aio/lio_listio.c"
			],
			[
				"aio_write.c",
				"nuttx/fs/aio/aio_write.c"
			],
			[
				"aio_read.c",
				"nuttx/fs/aio/aio_read.c"
			],
			[
				"aioc_contain.c",
				"nuttx/fs/aio/aioc_contain.c"
			],
			[
				"aio.c",
				"apps/examples/ostest/aio.c"
			],
			[
				"ringbuf",
				"dds/src/trans/ringbuffer/ghpringbuf.h"
			],
			[
				"aio.h",
				"nuttx/include/aio.h"
			],
			[
				"src/xtypes/pid.c",
				"dds/src/xtypes/pid.c"
			],
			[
				"readline_comm",
				"apps/system/readline/readline_common.c"
			],
			[
				"stm3240g-eval/scripts",
				"nuttx/configs/stm3240g-eval/scripts/ld.script"
			],
			[
				"ld.sc",
				"nuttx/configs/amber/hello/ld.script"
			],
			[
				"stm32/stm32_start.c",
				"nuttx/arch/arm/src/stm32/stm32_start.c"
			],
			[
				"src/include/features.h",
				"dds/src/include/features.h"
			],
			[
				"/arm/src/stm32_start.c",
				"nuttx/arch/arm/src/stm32/stm32_start.c"
			],
			[
				"igmp/igmp_send.c",
				"nuttx/net/igmp/igmp_send.c"
			],
			[
				"src/trans/ip/rtps_ip.c",
				"dds/src/trans/ip/rtps_ip.c"
			],
			[
				"include/rtps_cfg.h",
				"dds/src/include/rtps_cfg.h"
			],
			[
				"xtypes/pid.",
				"dds/src/xtypes/pid.c"
			],
			[
				"include/features.h",
				"dds/src/include/features.h"
			],
			[
				"configs/stm3240g-eval/nxterm/defconfig",
				"nuttx/configs/stm3240g-eval/nxterm/defconfig"
			],
			[
				"configs/stm32f4discovery/dds/defconfig",
				"nuttx/configs/stm32f4discovery/dds/defconfig"
			],
			[
				"ringbu",
				"dds/src/trans/ringbuffer/ghpringbuf.c"
			],
			[
				"ring",
				"dds/src/trans/ringbuffer/ghpringbuf.h"
			],
			[
				"netutils/netlib/netlib_ipmsfilter.c",
				"apps/netutils/netlib/netlib_ipmsfilter.c"
			],
			[
				"arch/arm/src/stm32/stm32_eth.c",
				"nuttx/arch/arm/src/stm32/stm32_eth.c"
			],
			[
				"thread.h",
				"dds/src/include/thread.h"
			],
			[
				"rit_udp",
				"dds/src/trans/ip/ri_udp.c"
			],
			[
				"in.h",
				"nuttx/include/netinet/in.h"
			],
			[
				"dds.c",
				"dds/src/dds/dds.c"
			],
			[
				".config",
				"~/Dropbox/OSRF/ros2_embedded_nuttx/nuttx/.config"
			],
			[
				"include/aio.h",
				"nuttx/include/arch/calypso/armio.h"
			],
			[
				"rtps_main.c",
				"dds/src/rtps/rtps_main.c"
			],
			[
				"src/include/thread.h",
				"dds/src/include/thread.h"
			],
			[
				"poll.h",
				"nuttx/include/poll.h"
			],
			[
				"include/netinet/in.h",
				"nuttx/include/netinet/in.h"
			],
			[
				"apps/nshlib/nsh_netcmds.c",
				"apps/nshlib/nsh_netcmds.c"
			],
			[
				"sys.c",
				"dds/src/co/sys.c"
			],
			[
				"ri_udp",
				"dds/src/trans/ip/ri_udp.c"
			],
			[
				"rtps_ip.c",
				"dds/src/trans/ip/rtps_ip.c"
			],
			[
				"tsm",
				"dds/src/xtypes/tsm.c"
			],
			[
				"sock.c",
				"dds/src/co/sock.c"
			],
			[
				"co/thread",
				"dds/src/co/thread.c"
			],
			[
				"mm_free.c",
				"nuttx/mm/mm_free.c"
			],
			[
				"sec_data.h",
				"dds/src/include/sec_data.h"
			],
			[
				"dcps_dpfact.c",
				"dds/src/dcps/dcps_dpfact.c"
			],
			[
				"xtypes",
				"dds/src/xtypes/xtypes.c"
			],
			[
				"pthread/pthread_mutexlock.c",
				"nuttx/sched/pthread/pthread_mutexlock.c"
			],
			[
				"up_blocktask.c",
				"nuttx/arch/arm/src/armv7-m/up_blocktask.c"
			],
			[
				"error.c",
				"dds/src/co/error.c"
			],
			[
				"dds/dds_aux.",
				"dds/api/headers/dds/dds_aux.h"
			],
			[
				"dds/src/trans/ip/rtps_ip.c",
				"dds/src/trans/ip/rtps_ip.c"
			],
			[
				"dds/src/xtypes/xcdr.c",
				"dds/src/xtypes/xcdr.c"
			],
			[
				"dds/src/xtypes/xtypecode.c",
				"dds/src/xtypes/xtypecode.c"
			],
			[
				"dds/src/include/vtc.h",
				"dds/src/include/vtc.h"
			],
			[
				"src/dds/dds.c",
				"dds/src/dds/dds.c"
			],
			[
				"headers/dds/dds_debug.h",
				"dds/api/headers/dds/dds_debug.h"
			],
			[
				"/headers/dds/dds_debug.h",
				"dds/api/headers/dds/dds_debug.h"
			],
			[
				"dds/src/dds/dds.c",
				"dds/src/dds/dds.c"
			],
			[
				"dds/src/sql/bytecode.c",
				"dds/src/sql/bytecode.c"
			],
			[
				"dds/src/co/sock.c",
				"dds/src/co/sock.c"
			],
			[
				"src/co/nmatch.c",
				"dds/src/co/nmatch.c"
			],
			[
				"dds/src/co/config.c",
				"dds/src/co/config.c"
			],
			[
				"src/xtypes/xtypes.c",
				"dds/src/xtypes/xtypes.c"
			],
			[
				"dds/src/dds/guid.c",
				"dds/src/dds/guid.c"
			],
			[
				"src/xtypes/builtin.c",
				"dds/src/xtypes/builtin.c"
			],
			[
				"include/pthread.h",
				"nuttx/include/nuttx/pthread.h"
			],
			[
				"dds/src/co/thread.c",
				"dds/src/co/thread.c"
			],
			[
				"uqos.c",
				"dds/src/dds/uqos.c"
			],
			[
				"chip.h",
				"nuttx/include/arch/a1x/chip.h"
			],
			[
				"locator.c",
				"dds/src/dds/locator.c"
			],
			[
				"dds.h",
				"dds/src/include/dds.h"
			],
			[
				"include/domain.h",
				"dds/src/include/domain.h"
			],
			[
				"include/sec_data.h",
				"dds/src/include/sec_data.h"
			],
			[
				"sys.h",
				"dds/src/include/sys.h"
			],
			[
				"chip/stm32_eth.c",
				"nuttx/arch/arm/src/chip/stm32_eth.c"
			],
			[
				"nsh_netinit.c",
				"apps/nshlib/nsh_netinit.c"
			],
			[
				"stm32f40_pin",
				"nuttx/arch/arm/src/chip/chip/stm32f40xxx_pinmap.h"
			],
			[
				"stm32_spi.c",
				"nuttx/configs/stm32ldiscovery/src/stm32_spi.c"
			],
			[
				"chip/stm32_spi.c",
				"nuttx/arch/arm/src/chip/stm32_spi.c"
			],
			[
				"include/nuttx/net/mii.h",
				"nuttx/include/nuttx/net/mii.h"
			],
			[
				"configs/cloudctrl/nsh/defconfig",
				"nuttx/configs/cloudctrl/nsh/defconfig"
			],
			[
				"net_sockets.c",
				"nuttx/net/net_sockets.c"
			],
			[
				"/stm32_eth.c",
				"nuttx/arch/arm/src/chip/stm32_eth.c"
			],
			[
				"stm32_eth.c",
				"nuttx/arch/arm/src/chip/stm32_eth.c"
			],
			[
				"armv7-m/up_doirq.c",
				"nuttx/arch/arm/src/armv7-m/up_doirq.c"
			],
			[
				"os_bringup.c",
				"nuttx/sched/os_bringup.c"
			],
			[
				"stm32_lowputc.c",
				"nuttx/arch/arm/src/chip/stm32_lowputc.c"
			],
			[
				"stm32_vectors.s",
				"nuttx/arch/arm/src/chip/stm32_vectors.S"
			],
			[
				"arch/arm/src/stm32/stm32_rcc.c",
				"nuttx/arch/arm/src/stm32/stm32_rcc.c"
			],
			[
				"nuttx/include/math.h",
				"nuttx/include/nuttx/math.h"
			],
			[
				"dds.",
				"dds/src/dds/dds.c"
			],
			[
				"sp_auth",
				"dds/plugins/nsecplug/sp_auth.h"
			],
			[
				"dds_security",
				"dds/api/headers/dds/dds_security.h"
			],
			[
				"task.",
				"rtos/FreeRTOS/include/task.h"
			],
			[
				"dcps_reader.c",
				"dds/src/dcps/dcps_reader.c"
			],
			[
				"cdr.h",
				"dds/src/include/cdr.h"
			],
			[
				"/dcps_reader.c",
				"dds/src/dcps/dcps_reader.c"
			],
			[
				"dds_debug.h",
				"dds/api/headers/dds/dds_debug.h"
			],
			[
				"startup_stm32f4xx.s",
				"rtos/CMSIS/STM32F4x7/Device/ST/STM32F4xx/Source/Templates/TrueSTUDIO/startup_stm32f4xx.s"
			],
			[
				"freertos/portable/gcc/arm_cm3/port.c",
				"rtos/FreeRTOS/portable/GCC/ARM_CM3/port.c"
			],
			[
				"stm32f4x7_eth_bsp",
				"app/echo/src/stm32f4x7_eth_bsp.c"
			],
			[
				"startup_stm32f4xx",
				"rtos/CMSIS/STM32F4x7/Device/ST/STM32F4xx/Source/Templates/TrueSTUDIO/startup_stm32f4xx.s"
			],
			[
				"stm32f4x7_eth_bsp.h",
				"app/echo/inc/stm32f4x7_eth_bsp.h"
			],
			[
				"stm32f4xx_it.c",
				"app/echo/src/stm32f4xx_it.c"
			],
			[
				"stm32f4x7_eth_bsp.c",
				"app/echo/src/stm32f4x7_eth_bsp.c"
			],
			[
				"domain",
				"include/domain/domain_participant.h"
			],
			[
				"topic",
				"include/topic/topic.h"
			],
			[
				"domain_parti",
				"src/domain/domain_participant.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 866.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 364.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
